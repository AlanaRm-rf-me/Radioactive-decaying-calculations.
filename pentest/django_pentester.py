#!/usr/bin/env python3

import argparse
import requests
from bs4 import BeautifulSoup
import nmap
from colorama import init, Fore
import sys
import socket
from concurrent.futures import ThreadPoolExecutor
from urllib.parse import urljoin
import time

init()  # Initialize colorama

class DjangoPentester:
    def __init__(self, target_url):
        self.target_url = target_url if target_url.startswith(('http://', 'https://')) else f'http://{target_url}'
        self.common_paths = [
            '/admin/',
            '/login/',
            '/api/',
            '/static/',
            '/media/',
            '/accounts/login/',
            '/admin/login/',
            '/django-admin/',
        ]
        self.vulnerabilities = []
        
    def print_banner(self):
        banner = """
        ╔══════════════════════════════════════╗
        ║         Django Penetration Test      ║
        ║            Version 1.0               ║
        ╚══════════════════════════════════════╝
        """
        print(Fore.CYAN + banner + Fore.RESET)

    def port_scan(self, host):
        print(f"\n{Fore.YELLOW}[*] Starting port scan...{Fore.RESET}")
        nm = nmap.PortScanner()
        try:
            # Scan common web ports
            nm.scan(host, '80,443,8000,8080,8443')
            
            for host in nm.all_hosts():
                print(f"\n{Fore.GREEN}[+] Host: {host}{Fore.RESET}")
                for proto in nm[host].all_protocols():
                    ports = nm[host][proto].keys()
                    for port in ports:
                        state = nm[host][proto][port]['state']
                        print(f"{Fore.BLUE}[*] Port {port}/{proto}: {state}{Fore.RESET}")
        except Exception as e:
            print(f"{Fore.RED}[-] Port scan failed: {str(e)}{Fore.RESET}")

    def check_endpoint(self, path):
        url = urljoin(self.target_url, path)
        try:
            response = requests.get(url, timeout=5, verify=False)
            if response.status_code == 200:
                print(f"{Fore.GREEN}[+] Found endpoint: {url} (Status: {response.status_code}){Fore.RESET}")
                self.check_vulnerabilities(url, response)
            elif response.status_code == 403:
                print(f"{Fore.YELLOW}[!] Protected endpoint: {url} (Status: {response.status_code}){Fore.RESET}")
            elif response.status_code == 404:
                pass
            else:
                print(f"{Fore.BLUE}[*] Endpoint response: {url} (Status: {response.status_code}){Fore.RESET}")
        except requests.exceptions.RequestException:
            pass

    def check_vulnerabilities(self, url, response):
        # Check for Django Debug Mode
        if 'DisallowedHost' in response.text and 'DEBUG = True' in response.text:
            self.vulnerabilities.append(f"Debug mode enabled at {url}")
        
        # Check for exposed Django admin interface
        if '/admin/' in url and 'Django administration' in response.text:
            self.vulnerabilities.append(f"Exposed Django admin interface at {url}")
        
        # Check for CSRF token vulnerabilities
        if 'csrftoken' not in response.cookies:
            self.vulnerabilities.append(f"Missing CSRF token at {url}")

    def enumerate_endpoints(self):
        print(f"\n{Fore.YELLOW}[*] Enumerating endpoints...{Fore.RESET}")
        with ThreadPoolExecutor(max_workers=5) as executor:
            executor.map(self.check_endpoint, self.common_paths)

    def run_scan(self):
        self.print_banner()
        
        try:
            host = self.target_url.split('://')[1].split('/')[0]
            self.port_scan(host)
            self.enumerate_endpoints()
            
            if self.vulnerabilities:
                print(f"\n{Fore.RED}[!] Vulnerabilities found:{Fore.RESET}")
                for vuln in self.vulnerabilities:
                    print(f"{Fore.RED}[-] {vuln}{Fore.RESET}")
            else:
                print(f"\n{Fore.GREEN}[+] No obvious vulnerabilities found{Fore.RESET}")
                
        except Exception as e:
            print(f"{Fore.RED}[-] Scan failed: {str(e)}{Fore.RESET}")

def main():
    parser = argparse.ArgumentParser(description='Django Server Penetration Testing Tool')
    parser.add_argument('target', help='Target URL (e.g., example.com or http://example.com)')
    args = parser.parse_args()

    pentester = DjangoPentester(args.target)
    pentester.run_scan()

if __name__ == '__main__':
    main()
